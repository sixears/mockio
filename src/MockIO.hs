{-# LANGUAGE DeriveFunctor     #-}
{-# LANGUAGE InstanceSigs      #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE QuasiQuotes       #-}
{-# LANGUAGE RankNTypes        #-}
{-# LANGUAGE UnicodeSyntax     #-}

module MockIO
  ( tests )
where

-- base --------------------------------

import Data.Bool            ( Bool( False, True ), not, otherwise )
import Control.Applicative  ( Applicative, (<*>), pure )
import Control.Monad        ( Monad, (>>=), return )
import Data.Eq              ( Eq )
import Data.Function        ( ($), (&), const, id )
import Data.Functor         ( Functor, fmap )
import Data.Maybe           ( Maybe( Just, Nothing ) )
import Data.Monoid          ( Monoid )
import Data.String          ( String )
import GHC.Exts             ( fromList )
import GHC.Stack            ( SrcLoc( SrcLoc ) )
import System.Exit          ( ExitCode )
import System.IO            ( FilePath, IO )
import Text.Show            ( Show )

-- base-unicode-symbols ----------------

import Data.Eq.Unicode        ( (‚â°) )
import Data.Monoid.Unicode    ( (‚äï) )
import Data.Function.Unicode  ( (‚àò) )

-- data-default ------------------------

import Data.Default  ( Default( def ) )

-- dlist -------------------------------

import Data.DList  ( DList )

-- lens --------------------------------

import Control.Lens  ( Lens', lens )

-- log-plus ----------------------------

import Log           ( Log, fromList, logIO, logIO', logIOT )
import Log.Equish    ( Equish( (‚âÉ) ) )
import Log.LogEntry  ( logEntry )

-- logging-effect ----------------------

import Control.Monad.Log  ( MonadLog, Severity(..), WithSeverity( WithSeverity )
                          , logMessage, runLoggingT, runPureLoggingT )

-- monadio-plus ------------------------

import MonadIO  ( MonadIO, liftIO )

-- more-unicode ------------------------

import Data.MoreUnicode.Bool     ( ùîπ )
import Data.MoreUnicode.Lens     ( (‚ä£), (‚ä¢) )
import Data.MoreUnicode.Monad    ( (‚™º) )
import Data.MoreUnicode.Monoid   ( —é )
import Data.MoreUnicode.Natural  ( ‚Ñï )

-- mtl ---------------------------------

import Control.Monad.Except  ( MonadError )
import Control.Monad.Reader  ( ReaderT )
import Control.Monad.Trans   ( MonadTrans, lift )
import Control.Monad.Writer  ( MonadWriter, runWriterT, tell )

-- prettyprinter -----------------------

import Data.Text.Prettyprint.Doc  ( SimpleDocStream(..)
                                  , annotate, defaultLayoutOptions, hsep
                                  , layoutPretty, line, pretty
                                  )

-- streaming ---------------------------

import Streaming.Prelude  ( Of, Stream )

-- tasty -------------------------------

import Test.Tasty  ( TestTree, testGroup )

-- tasty-hunit -------------------------

import Test.Tasty.HUnit  ( (@=?), assertBool, testCase )

-- tasty-plus --------------------------

import TastyPlus   ( (‚âü), runTestsP, runTestsReplay, runTestTree,withResource' )
import TastyPlus2  ( withResource2' )

-- text --------------------------------

import Data.Text     ( Text, pack )
import Data.Text.IO  ( readFile )

-- time --------------------------------

import Data.Time.Clock  ( UTCTime, getCurrentTime )

-- tfmt --------------------------------

import Text.Fmt  ( fmt )

------------------------------------------------------------
--                     local imports                      --
------------------------------------------------------------

import ProcLib.Error.CreateProcError  ( AsCreateProcError )
import ProcLib.Types.ProcExecCtxt     ( ProcExecCtxt )
import ProcLib.Types.ProcIOAction     ( ProcIOAction )

--------------------------------------------------------------------------------

-- TODO:
-- add logIO' to carry arbitrary data; same for log & log'
-- tighten up naming; split out mocking & logging; terminal colouring
-- demo logging methods incl. stderr
-- clearer mock logging (e.g. (CMD) vs [CMD]); options handlers for logs
-- cmd logging using showcmdforuser

_li0 ‚à∑ (MonadIO Œº, MonadLog (Log ()) Œº) ‚áí Œº Text
_li0 = logIOT Informational "li0" ‚™º return "Godzilla"

_li1 ‚à∑ (MonadIO Œº, MonadLog (Log ()) Œº) ‚áí Œº Text
_li1 = do
  _ ‚Üê _li0
  logIOT Informational "li1"
  return "MUTO"

data ProcIO' Œµ Œ∑ œâ =
    Cmd { unCmd ‚à∑ MonadError Œµ Œ∑ ‚áí
                       ReaderT (ProcExecCtxt Œ∑) (Stream (Of ProcIOAction) Œ∑) œâ }

type ProcIO Œµ Œ∑ œâ = MonadError Œµ Œ∑ ‚áí ProcIO' Œµ Œ∑ œâ

instance (Monad Œ∑) ‚áí Functor (ProcIO' Œµ Œ∑) where
  fmap ‚à∑ (Œ± ‚Üí Œ≤) ‚Üí ProcIO' Œµ Œ∑ Œ± ‚Üí ProcIO' Œµ Œ∑ Œ≤
  fmap f (Cmd a) = Cmd (fmap f a)

instance (Monad Œ∑) ‚áí Applicative (ProcIO' Œµ Œ∑) where
  pure = Cmd ‚àò pure
  (<*>) ‚à∑ ProcIO' Œµ Œ∑ (Œ± ‚Üí Œ≤) ‚Üí ProcIO' Œµ Œ∑ Œ± ‚Üí ProcIO' Œµ Œ∑ Œ≤
  Cmd f <*> Cmd xs = Cmd (f <*> xs)

instance Monad Œ∑ ‚áí Monad (ProcIO' Œµ Œ∑) where
  Cmd c >>=  f = Cmd (c >>=  unCmd ‚àò f)

instance MonadTrans (ProcIO' Œµ) where
  lift ‚à∑ Monad Œ∑ ‚áí Œ∑ Œ± ‚Üí ProcIO' Œµ Œ∑ Œ±
  lift = Cmd ‚àò lift ‚àò lift

mkCmd ‚à∑ AsCreateProcError Œµ ‚áí
        ReaderT (ProcExecCtxt Œ∑) (Stream (Of ProcIOAction) Œ∑) œâ ‚Üí ProcIO' Œµ Œ∑ œâ
mkCmd = Cmd

mkPIO ‚à∑ MonadError Œµ Œ∑ ‚áí
        ReaderT (ProcExecCtxt Œ∑) (Stream (Of ProcIOAction) Œ∑) œâ ‚Üí ProcIO' Œµ Œ∑ œâ
mkPIO = Cmd

-- given:
--    -) some logging text (actually, a function from "was it a mock?" to
--       logging text (Mocked ‚Üí Text)
--    -) a mock value (œâ)
--    -) an IO action (IO œâ)
-- return:
--    -) A monad which, when told whether to mock, will (a) act (b) log (c)
--       return a value

data DoMock = DoMock | NoMock
  deriving (Eq,Show)

-- mkIO' ‚à∑ ‚àÄ œâ œÑ Œº . (MonadIO Œº, MonadLog œÑ Œº) ‚áí (DoMock ‚Üí œÑ) ‚Üí œâ ‚Üí IO œâ ‚Üí DoMock ‚Üí Œº œâ
mkIO' ‚à∑ (MonadIO Œº, MonadLog œÑ Œº) ‚áí (DoMock ‚Üí œÑ) ‚Üí œâ ‚Üí IO œâ ‚Üí DoMock ‚Üí Œº œâ
mkIO' log mock_value io mock = do
  logMessage (log mock)
  case mock of
    NoMock ‚Üí liftIO io
    DoMock ‚Üí return mock_value

mkIORead ‚à∑ (MonadIO Œº, MonadLog (Log œâ) Œº, Default œâ, HasIOClass œâ) ‚áí
           (DoMock ‚Üí Text) ‚Üí Œ± ‚Üí IO Œ± ‚Üí DoMock ‚Üí Œº Œ±
mkIORead log mock_value io mock = do
  logIO Informational (def & ioClass ‚ä¢ IORead) (log mock)
  case mock of
    NoMock ‚Üí liftIO io
    DoMock ‚Üí return mock_value

newtype SimpleLogEntry = SimpleLogEntry (IOClass,Text)
  deriving (Eq,Show)

instance HasIOClass SimpleLogEntry where
  ioClass = lens (\ (SimpleLogEntry (c,_)) ‚Üí c)
                 (\ (SimpleLogEntry (_,t)) c ‚Üí SimpleLogEntry (c,t))

type SimpleLog = DList (WithSeverity SimpleLogEntry)

{- | Fold a function across a stream; intended for use as a subclause of other
     folds. -}
foldDocStream ‚à∑ (SimpleDocStream Œ± ‚Üí SimpleDocStream Œ±) ‚Üí SimpleDocStream Œ±
              ‚Üí SimpleDocStream Œ±
foldDocStream f (SText l t rest)    = SText l t (f rest)
foldDocStream f (SLine i rest)      = SLine i (f rest)
foldDocStream f (SChar c rest)      = SChar c (f rest)
foldDocStream f (SAnnPush ann rest) = SAnnPush ann (f rest)
foldDocStream f (SAnnPop rest)      = SAnnPop (f rest)
foldDocStream _ SEmpty              = SEmpty
foldDocStream _ SFail               = SFail

dropEmptyAnnotations ‚à∑ SimpleDocStream Œ± ‚Üí SimpleDocStream Œ±
dropEmptyAnnotations (SAnnPush _ (SAnnPop rest)) = dropEmptyAnnotations rest
dropEmptyAnnotations ss = foldDocStream dropEmptyAnnotations ss

{- | Filter a doc stream on annotations; only annotations that match the given
     predicate may pass. -}
filterDocStream ‚à∑ (Œ± ‚Üí ùîπ) ‚Üí SimpleDocStream Œ± ‚Üí SimpleDocStream Œ±
filterDocStream p = dropEmptyAnnotations ‚àò go []
  where
    -- For Text,Char,Line; filter out things that match the predicate, else
    -- just keep calm & carry on.
    go (stack@(s:_)) (SText l t rest) | p s = SText l t (go stack rest)
                                      | otherwise = go stack rest
    go (stack@(s:_)) (SChar c rest)   | p s = SChar c (go stack rest)
                                      | otherwise = go stack rest
    go (stack@(s:_)) (SLine i rest)   | p s = SLine i (go stack rest)
                                      | otherwise = go stack rest

    -- Stack push & pop.
    go stack         (SAnnPush ann rest) = SAnnPush ann (go (ann : stack) rest)
    go (_:stack)     (SAnnPop rest)      = SAnnPop (go stack rest)

    go stack ss = foldDocStream (go stack) ss

filterDocTests ‚à∑ TestTree
filterDocTests =
  let -- note that sdoc has SText ("begin"), SLine (line), and SChar (hsep)
      sdoc ‚à∑ SimpleDocStream IOClass
      sdoc = layoutPretty defaultLayoutOptions
                          (—éÃÑ [ "begin"
                             , line
                             , hsep [ annotate IORead "ioread"
                                    , annotate IOCmdR "iocmdr"
                                    , annotate IOWrite "iowrite"
                                    ]
                             , line
                             , "end"
                             ])
      sdoc_none ‚à∑ SimpleDocStream IOClass
      sdoc_none = layoutPretty defaultLayoutOptions
                               (—éÃÑ [ "begin", line, hsep [ "","", "" ], line
                                  , "end" ])

      sdoc_internal ‚à∑ SimpleDocStream IOClass
      sdoc_internal = layoutPretty defaultLayoutOptions
                                   (—éÃÑ [ "begin"
                                      , line
                                      , hsep [ annotate IORead "ioread", ""
                                             , annotate IOWrite "iowrite"
                                             ]
                                      , line
                                      , "end"
                                      ])

   in testGroup "filterDoc"
                [ testCase "all may pass" $
                    sdoc @=? filterDocStream (const True) sdoc
                , testCase "none shall pass" $
                    sdoc_none @=? filterDocStream (const False) sdoc
                , testCase "isInternalIO" $
                    sdoc_internal @=? filterDocStream isInternalIO sdoc
                ]

{- | Note the awkward capitalization, to avoid clashing with
     `GHC.Stack.HasCallStack` -}
-- class HasCallstack Œ± where
--   callStack' ‚à∑ Lens' Œ± CallStack

-- instance HasCallstack CallStack where
--   callStack' = id

-- class HasUTCTimeY Œ± where
--   utcTimeY ‚à∑ Lens' Œ± (Maybe UTCTime)

-- instance HasUTCTimeY (Maybe UTCTime) where
--   utcTimeY = id

data LogRenderType = LRO_Plain
                   | LRO_Severity
                   | LRO_TimeStamp
                   | LRO_StackHead
                   | LRO_StackHeadTS
                   | LRO_Stack
                   | LRO_StackTS
  deriving Show

writerMonadTests ‚à∑ TestTree
writerMonadTests =
  let helloEntry = fromList [ SimpleLogEntry(IORead,"Hello") ]
      readFn ‚à∑ (MonadIO Œº, MonadWriter (DList SimpleLogEntry) Œº) ‚áí FilePath ‚Üí DoMock ‚Üí Œº Text
      readFn fn mock = runLoggingT (mkIO' (const helloEntry) "mockety"
                                         (readFile fn) mock) tell
   in testGroup "writerMonad"
                [ withResource2' (runWriterT $ readFn "/etc/subgid" NoMock)
                                 (readFile "/etc/subgid") $ \ txtlog exptxt ‚Üí
                    testGroup "NoMock"
                              [ testCase "txt" $ do (txt,_) ‚Üê txtlog
                                                    exp ‚Üê exptxt
                                                    exp ‚âü txt
                              , testCase "log" $ do (_,lg) ‚Üê txtlog
                                                    helloEntry @=? lg
                              ]
                , withResource' (runWriterT $ readFn "/etc/subgid" DoMock) $
                    \ txtlog ‚Üí
                    testGroup "DoMock"
                              [ testCase "txt" $ do (txt,_) ‚Üê txtlog
                                                    "mockety" ‚âü txt
                              , testCase "log" $ do (_,lg) ‚Üê txtlog
                                                    helloEntry @=? lg
                              ]
                ]

pureLoggingTests ‚à∑ TestTree
pureLoggingTests =
  let helloEntry = fromList [ SimpleLogEntry(IORead,"Hello") ]
      readFn' ‚à∑ (MonadIO Œº) ‚áí FilePath ‚Üí DoMock ‚Üí Œº (Text, DList SimpleLogEntry)
      readFn' fn mock = runPureLoggingT (mkIO' (const helloEntry) "mockety"
                                        (readFile fn) mock)
   in testGroup "pureLogging"
                [ withResource2' (readFn' "/etc/subgid" NoMock)
                                 (readFile "/etc/subgid") $ \ txtlog exptxt ‚Üí
                    testGroup "NoMock"
                              [ testCase "txt" $ do (txt,_) ‚Üê txtlog
                                                    exp ‚Üê exptxt
                                                    exp ‚âü txt
                              , testCase "log" $ do (_,lg) ‚Üê txtlog
                                                    helloEntry @=? lg
                              ]
                , withResource' (readFn' "/etc/subgid" DoMock) $ \ txtlog ‚Üí
                    testGroup "DoMock"
                              [ testCase "txt" $ do (txt,_) ‚Üê txtlog
                                                    "mockety" ‚âü txt
                              , testCase "log" $ do (_,lg) ‚Üê txtlog
                                                    helloEntry @=? lg
                              ]
                ]

-- XXX simplify logging
-- XXX simple functions for severity

data IOClass = IORead  -- ^ An IO action that perceives but does not alter state
             | IOWrite -- ^ An IO action that may alter state
             | IOCmdR  -- ^ An external cmd (results in an execve or fork call)
                       --   that perceives but does not alter state
             | IOCmdW  -- ^ An external cmd (results in an execve or fork call)
                       --   that may alter state
             | IOExec  -- ^ An exec (replaces this executable)
             | NoIO    -- ^ no IO
  deriving (Eq,Show)

instance Default IOClass where
  def = NoIO

instance Equish IOClass where
  i ‚âÉ i' = i ‚â° i'

class HasIOClass Œ± where
  ioClass ‚à∑ Lens' Œ± IOClass

instance HasIOClass IOClass where
  ioClass = id

{-| Predicate for IO that outside of this process; that is, exclude `IORead` &
    `IOWrite`; leaving `IOCmdR`, `IOCmdW`, `IOExec`. -}
isExternalIO ‚à∑ HasIOClass Œ± ‚áí Œ± -> ùîπ
isExternalIO a = case a ‚ä£ ioClass of
                   IORead  ‚Üí False
                   IOWrite ‚Üí False
                   IOCmdR  ‚Üí True
                   IOCmdW  ‚Üí True
                   IOExec  ‚Üí True

{-| Logical inverse of `isExternalIO`. -}
isInternalIO ‚à∑ HasIOClass Œ± ‚áí Œ± -> ùîπ
isInternalIO = not ‚àò isExternalIO

{- | "Log Message" the noun, rather than the verb; turn a simple message into a
     Log Message, with IOClass & Severity. -}
logMsg ‚à∑ Severity ‚Üí IOClass ‚Üí Text ‚Üí DList (WithSeverity SimpleLogEntry)
logMsg sv clss msg = fromList [WithSeverity sv (SimpleLogEntry(clss,msg))]

logInfo ‚à∑ IOClass ‚Üí Text ‚Üí DList (WithSeverity SimpleLogEntry)
logInfo = logMsg Informational

{- This exists here for testing only; real file reading/writing will be in a
   different package. -}
-- enhancements: toDoc(), set mock text
readFn ‚à∑ ‚àÄ œâ Œº . (MonadIO Œº, MonadLog (Log œâ) Œº, Default œâ, HasIOClass œâ) ‚áí
         String ‚Üí DoMock ‚Üí Œº Text
readFn s = mkIORead (const $ [fmt|read %s|] s) "mock text" (readFile s)

logMsgTests ‚à∑ TestTree
logMsgTests =
  let -- helloEnt = fromList [ WithSeverity Informational $ SimpleLogEntry(IORead,"hello") ]
      readFn' ‚à∑ (MonadIO Œº) ‚áí FilePath ‚Üí DoMock ‚Üí Œº (Text, SimpleLog)
      readFn' fn mock = runPureLoggingT (mkIO' (const $ logInfo IORead "hello")
                                               "mockety" (readFile fn) mock)
      my_log_entry t = logEntry [("logIO"‚à∑String,SrcLoc "main" "MockIO" "src/MockIO.hs" 193 3 193 58)] (Just t) Informational (pretty @Text "read /etc/subgid") IORead
      my_log ‚à∑ UTCTime ‚Üí Log IOClass
      my_log t = fromList [ my_log_entry t ]
   in withResource2' (runPureLoggingT $ readFn @IOClass "/etc/subgid" NoMock)
                     (readFile "/etc/subgid") $ \ txtlog exptxt ‚Üí
        testGroup "logMsg"
                  [ testCase "txt" $ do (txt,_) ‚Üê txtlog
                                        exp ‚Üê exptxt
                                        exp ‚âü txt
                  , testCase "log" $ do (_,lg) ‚Üê txtlog
                                        t ‚Üê getCurrentTime
                                        assertBool ([fmt|my_log:\n  exp: %w\nvs.\n  got: %w|] (my_log t) lg)
                                                   (my_log t ‚âÉ lg)
                  ]

oldLogMsgTests ‚à∑ TestTree
oldLogMsgTests =
  let helloEnt = fromList [ WithSeverity Informational $ SimpleLogEntry(IORead,"hello") ]
      readFn' ‚à∑ (MonadIO Œº) ‚áí FilePath ‚Üí DoMock ‚Üí Œº (Text, SimpleLog)
      readFn' fn mock = runPureLoggingT (mkIO' (const $ logInfo IORead "hello")
                                               "mockety" (readFile fn) mock)
   in withResource2' (readFn' "/etc/subgid" NoMock)
                     (readFile "/etc/subgid") $ \ txtlog exptxt ‚Üí
        testGroup "logMsg"
                  [ testCase "txt" $ do (txt,_) ‚Üê txtlog
                                        exp ‚Üê exptxt
                                        exp ‚âü txt
                  , testCase "log" $ do (_,lg) ‚Üê txtlog
                                        helloEnt @=? lg
                  ]

—éÃÑ ‚à∑ Monoid Œ± ‚áí [Œ±] ‚Üí Œ±
—éÃÑ = —é

--------------------------------------------------------------------------------
--                                   tests                                    --
--------------------------------------------------------------------------------

tests ‚à∑ TestTree
tests = testGroup "MockIO" [ filterDocTests, writerMonadTests, pureLoggingTests
                           , logMsgTests
                           ]

----------------------------------------

_test ‚à∑ IO ExitCode
_test = runTestTree tests

--------------------

_tests ‚à∑ String ‚Üí IO ExitCode
_tests = runTestsP tests

_testr ‚à∑ String ‚Üí ‚Ñï ‚Üí IO ExitCode
_testr = runTestsReplay tests

-- that's all, folks! ----------------------------------------------------------
