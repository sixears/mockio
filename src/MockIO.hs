{-# LANGUAGE DeriveFunctor              #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE ImplicitParams             #-}
{-# LANGUAGE InstanceSigs               #-}
{-# LANGUAGE NoImplicitPrelude          #-}
{-# LANGUAGE RankNTypes                 #-}
{-# LANGUAGE TupleSections              #-}
{-# LANGUAGE TypeApplications           #-}
{-# LANGUAGE TypeFamilies               #-}
{-# LANGUAGE UnicodeSyntax              #-}
{-# LANGUAGE ViewPatterns               #-}

import Prelude  ( undefined )

-- base --------------------------------

import qualified  Control.Exception  as  E
import qualified  GHC.Stack

import Data.Bool            ( Bool( False, True ), not, otherwise )
import Control.Applicative  ( Applicative, (<*>), pure )
import Control.Monad        ( Monad, (>>=), mapM, return, unless )
import Control.Monad.Catch  ( MonadMask )
import Control.Monad.Identity  ( runIdentity )
import Data.Eq              ( Eq )
import Data.Foldable        ( Foldable, foldr, mapM_, toList )
import Data.Function        ( ($), (&), const, flip, id )
import Data.Functor         ( Functor, fmap )
import Data.List            ( zip )
import Data.Maybe           ( Maybe( Just, Nothing ) )
import Data.Monoid          ( Monoid( mappend, mconcat, mempty ) )
import Data.Semigroup       ( Semigroup( (<>), sconcat, stimes ) )
import Data.String          ( String, lines )
import Data.Tuple           ( fst, snd )
import GHC.Exts             ( fromList )
import GHC.Stack            ( CallStack, HasCallStack, SrcLoc
                            , fromCallSiteList, getCallStack, popCallStack
                            , srcLocFile, srcLocStartLine
                            )
import System.Exit          ( ExitCode )
import System.IO            ( FilePath, IO, stderr )
import Text.Show            ( Show( show ) )

-- base-unicode-symbols ----------------

import Data.Eq.Unicode        ( (‚â°) )
import Data.Function.Unicode  ( (‚àò) )
import Data.Monoid.Unicode    ( (‚äï) )

-- data-default ------------------------

import Data.Default  ( Default( def ) )

-- data-textual ------------------------

import Data.Textual  ( Printable( print ), toText, toString )

-- dlist -------------------------------

import Data.DList  ( DList, singleton )

-- fluffy ------------------------------

import Fluffy.Foldable  ( length )

-- lens --------------------------------

import Control.Lens  ( Lens', lens, view )

-- logging-effect ----------------------

import qualified  Control.Monad.Log
import Control.Monad.Log  ( MonadLog, PureLoggingT, Severity(..)
                          , WithSeverity( WithSeverity )
                          , defaultBatchingOptions, logMessage, timestamp
                          , renderWithSeverity, runLoggingT, runPureLoggingT
                          , withFDHandler
                          )

-- monadio-plus ------------------------

import MonadIO  ( MonadIO, liftIO, say )

-- mono-traversable --------------------

import Data.MonoTraversable  ( Element, MonoFunctor( omap ) )

-- more-unicode ------------------------

import Data.MoreUnicode.Bool     ( ùîπ )
import Data.MoreUnicode.Functor  ( (‚ä≥), (‚©∫) )
import Data.MoreUnicode.Lens     ( (‚ä£), (‚ä¢) )
import Data.MoreUnicode.Monad    ( (‚™º), (‚â´) )
import Data.MoreUnicode.Monoid   ( —Ñ, —é )
import Data.MoreUnicode.Natural  ( ‚Ñï )

-- mtl ---------------------------------

import Control.Monad.Except  ( MonadError )
import Control.Monad.Reader  ( ReaderT )
import Control.Monad.Trans   ( MonadTrans, lift )
import Control.Monad.Writer  ( MonadWriter, runWriterT, tell )

-- prettyprinter -----------------------

import Data.Text.Prettyprint.Doc  ( Doc, LayoutOptions( LayoutOptions )
                                  , PageWidth( AvailablePerLine, Unbounded )
                                  , Pretty
                                  , SimpleDocStream(..)
                                  , (<+>)
                                  , align, annotate, brackets
                                  , defaultLayoutOptions, emptyDoc, enclose
                                  , hsep, indent, layoutPageWidth, layoutPretty
                                  , line, pretty
                                  , space, vsep
                                  )
import Data.Text.Prettyprint.Doc.Util  ( reflow )
import Data.Text.Prettyprint.Doc.Render.Util.Panic  ( panicInputNotFullyConsumed
                                                    , panicUncaughtFail
                                                    , panicUnpairedPop
                                                    )
import Data.Text.Prettyprint.Doc.Render.Text  ( renderStrict )

-- printer -----------------------------

import qualified  Text.Printer  as  P

-- safe --------------------------------

import Safe  ( atMay, headMay )

-- streaming ---------------------------

import Streaming.Prelude  ( Of, Stream )

-- tasty -------------------------------

import Test.Tasty  ( TestTree, testGroup, withResource )

-- tasty-hunit -------------------------

import Test.Tasty.HUnit  ( Assertion, HUnitFailure( HUnitFailure ), (@=?), assertBool, testCase )

-- tasty-plus --------------------------

import TastyPlus  ( (‚âü), runTestsP, runTestsReplay, runTestTree, withResource' )

-- text --------------------------------

import qualified  Data.Text       as  T
import qualified  Data.Text.Lazy  as  LT

import Data.Text     ( Text, intercalate, pack, take, unlines, unpack )
import Data.Text.IO  ( readFile )

-- tfmt --------------------------------

import Text.Fmt  ( fmt )

-- time --------------------------------

import Data.Time.Calendar  ( fromGregorian )
import Data.Time.Clock     ( UTCTime( UTCTime ), getCurrentTime
                           , secondsToDiffTime )
import Data.Time.Format    ( defaultTimeLocale, formatTime, rfc822DateFormat )

------------------------------------------------------------
--                     local imports                      --
------------------------------------------------------------

import ProcLib.Error.CreateProcError  ( AsCreateProcError )
import ProcLib.Types.ProcExecCtxt     ( ProcExecCtxt )
import ProcLib.Types.ProcIOAction     ( ProcIOAction )

--------------------------------------------------------------------------------

-- TODO: use logMessage in logIO; logIO'‚ÜílogIO; printable Log{,Entry}
-- add logIO' to carry arbitrary data; same for log & log'; elide WithCallStack
-- add simple logging (without io); different brackets for severity & timestamp
-- tighten up naming; split out mocking & logging; terminal colouring
-- split out stacktrace tests; demo logging methods incl. stderr
-- clearer mock logging (e.g. (CMD) vs [CMD]); options handlers for logs
-- cmd logging using showcmdforuser

-- Placed at the top to reduce line movements messing up the tests
logIO ‚à∑ (MonadIO Œº, ?stack ‚à∑ CallStack) ‚áí Severity ‚Üí Text ‚Üí Œº LogEntry
logIO sv txt = liftIO getCurrentTime ‚â´ \ tm ‚Üí return $ withCallStack (pretty txt,tm,sv)

logIO_ ‚à∑ (MonadIO Œº, MonadLog Log Œº, ?stack ‚à∑ CallStack) ‚áí
         Severity ‚Üí Doc () ‚Üí Œº ()
logIO_ sv doc = do
  tm ‚Üê liftIO getCurrentTime
  logMessage ‚àò Log ‚àò singleton $ withCallStack (doc,tm,sv)

-- We redefine this, rather than simply calling logIO_, so we don't mess with
-- the callstack.
logIO' ‚à∑ (MonadIO Œº, MonadLog Log Œº, ?stack ‚à∑ CallStack) ‚áí
         Severity ‚Üí Text ‚Üí Œº ()
logIO' sv txt = do
  tm ‚Üê liftIO getCurrentTime
  logMessage ‚àò Log ‚àò singleton $ withCallStack (pretty txt,tm,sv)

-- test data

_cs0 ‚à∑ CallStack
_cs0 = fromCallSiteList []

_cs1 ‚à∑ CallStack
_cs1 = fromCallSiteList [ ("stack0",GHC.Stack.SrcLoc "z" "x" "y" 9 8 7 6) ]

_cs2 ‚à∑ CallStack
_cs2 = fromCallSiteList [ ("stack0",GHC.Stack.SrcLoc "a" "b" "c" 1 2 3 4)
                        , ("stack1",GHC.Stack.SrcLoc "d" "e" "f" 5 6 7 8) ]

_tm ‚à∑ UTCTime
_tm = UTCTime (fromGregorian 1970 1 1) (secondsToDiffTime 0)

_le0 ‚à∑ LogEntry
_le0 = LogEntry _cs2 _tm Informational (pretty ("log_entry 1" ‚à∑ Text))

_le1 ‚à∑ LogEntry
_le1 =
  LogEntry _cs1 _tm Critical (pretty ("multi-line\nlog\nmessage" ‚à∑ Text))

_le2 ‚à∑ LogEntry
_le2 =
  let valign = align ‚àò vsep
   in LogEntry _cs1 _tm Warning ("this is" ‚äû valign [ "a"
                                                    , "vertically"
                                                    ‚äû valign [ "aligned"
                                                             , "message"
                                                             ]
                                                    ])
_le3 ‚à∑ LogEntry
_le3 = 
  LogEntry _cs1 _tm Emergency (pretty ("this is the last message" ‚à∑ Text))

_log0 ‚à∑ Log
_log0 = Log $ fromList [_le0]

_log0m ‚à∑ MonadLog Log Œ∑ ‚áí Œ∑ ()
_log0m = logMessage _log0

_log1 ‚à∑ Log
_log1 = Log $ fromList [ _le0, _le1, _le2, _le3 ]

_log1m ‚à∑ MonadLog Log Œ∑ ‚áí Œ∑ ()
_log1m = logMessage _log1

renderTests ‚à∑ TestTree
renderTests =
  let render  t = logRender' (LogRenderOpts [] Unbounded {- t -})
      render' o = runIdentity ‚àò logRender' o
      line10 = AvailablePerLine 10 1.0
      renderLine10 t = logRender' (LogRenderOpts [] line10 {- t -})
      c = GHC.Stack.fromCallSiteList [("foo",GHC.Stack.SrcLoc "a" "b" "c" 1 2 3 4)]
      exp2 = [ intercalate "\n" [ "[Info] log_entry 1"
                                , "  stack0, called at c:1:2 in a:b"
                                , "    stack1, called at f:5:6 in d:e"
                                ]
             ]
      exp3 = [ "[Thu 1970-01-01Z00:00:00] [Info] ¬´c#1¬ª log_entry 1"
             , intercalate "\n" [   "[Thu 1970-01-01Z00:00:00] [CRIT] ¬´y#9¬ª "
                                  ‚äï "multi-line"
                                ,   "                                       "
                                  ‚äï "log"
                                ,   "                                       "
                                  ‚äï "message"
                                ]                   
             , intercalate "\n"
                           [ "[Thu 1970-01-01Z00:00:00] [Warn] ¬´y#9¬ª this is a"
                           ,   "                                               "
                             ‚äï "vertically aligned"
                           ,   "                                               "
                             ‚äï "           message"
                           ]                   
             , "[Thu 1970-01-01Z00:00:00] [EMRG] ¬´y#9¬ª this is the last message"
             ]
   in testGroup "render" $
                [ assertListEq "render2" exp2 (render' lroRenderSevCS _log0m)
                , assertListEqIO "render3"
                                 exp3 (logRender' lroRenderTSSevCSH _log1m)
                ]

data ProcIO' Œµ Œ∑ œâ =
    Cmd { unCmd ‚à∑ MonadError Œµ Œ∑ ‚áí
                       ReaderT (ProcExecCtxt Œ∑) (Stream (Of ProcIOAction) Œ∑) œâ }

type ProcIO Œµ Œ∑ œâ = MonadError Œµ Œ∑ ‚áí ProcIO' Œµ Œ∑ œâ

instance (Monad Œ∑) ‚áí Functor (ProcIO' Œµ Œ∑) where
  fmap ‚à∑ (Œ± ‚Üí Œ≤) ‚Üí ProcIO' Œµ Œ∑ Œ± ‚Üí ProcIO' Œµ Œ∑ Œ≤
  fmap f (Cmd a) = Cmd (fmap f a)

instance (Monad Œ∑) ‚áí Applicative (ProcIO' Œµ Œ∑) where
  pure = Cmd ‚àò pure
  (<*>) ‚à∑ ProcIO' Œµ Œ∑ (Œ± ‚Üí Œ≤) ‚Üí ProcIO' Œµ Œ∑ Œ± ‚Üí ProcIO' Œµ Œ∑ Œ≤
  Cmd f <*> Cmd xs = Cmd (f <*> xs)


instance Monad Œ∑ ‚áí Monad (ProcIO' Œµ Œ∑) where
  Cmd c >>=  f = Cmd (c >>=  unCmd ‚àò f)

instance MonadTrans (ProcIO' Œµ) where
  lift ‚à∑ Monad Œ∑ ‚áí Œ∑ Œ± ‚Üí ProcIO' Œµ Œ∑ Œ±
  lift = Cmd ‚àò lift ‚àò lift

mkCmd ‚à∑ AsCreateProcError Œµ ‚áí
        ReaderT (ProcExecCtxt Œ∑) (Stream (Of ProcIOAction) Œ∑) œâ ‚Üí ProcIO' Œµ Œ∑ œâ
mkCmd = Cmd

mkPIO ‚à∑ MonadError Œµ Œ∑ ‚áí
        ReaderT (ProcExecCtxt Œ∑) (Stream (Of ProcIOAction) Œ∑) œâ ‚Üí ProcIO' Œµ Œ∑ œâ
mkPIO = Cmd

-- given:
--    -) some logging text (actually, a function from "was it a mock?" to
--       logging text (Mocked ‚Üí Text)
--    -) a mock value (œâ)
--    -) an IO action (IO œâ)
-- return:
--    -) A monad which, when told whether to mock, will (a) act (b) log (c)
--       return a value

data Mock = DoMock | NoMock
  deriving (Eq,Show)

mkIO' ‚à∑ ‚àÄ œâ œÑ Œº . (MonadIO Œº, MonadLog œÑ Œº) ‚áí (Mock ‚Üí œÑ) ‚Üí œâ ‚Üí IO œâ ‚Üí Mock ‚Üí Œº œâ
mkIO' log mock_value io mock = do
  logMessage (log mock)
  case mock of
    NoMock ‚Üí liftIO io
    DoMock ‚Üí return mock_value

-- instance Semigroup (WithSeverity (SimpleLogEntry)) where
-- instance Monoid (WithSeverity (SimpleLogEntry)) where

-- derive:
--    -) A general function to establish whether to mock
--    -) A general logger meta-fn which just surrounds its args with () or <>.
--    -) A fn which auto-mocks for suitable types (incl. Natural/Int), Lists, Seqs‚Ä¶
--    -) A fn which collects a list of actions

-- consider: a list, or class, of Things Wot IO Could Do, for the sake of logging
-- no, a typeclass; need an action (printable), and a list of arguments
-- (printable).  We can set up some standard actions, make them part of that
-- typeclass; and allow for other typeclasses that can also handle them.

newtype SimpleLogEntry = SimpleLogEntry (IOClass,Text)
  deriving (Eq,Show)

instance HasIOClass SimpleLogEntry where
  ioClass = lens (\ (SimpleLogEntry (c,_)) ‚Üí c)
                 (\ (SimpleLogEntry (_,t)) c ‚Üí SimpleLogEntry (c,t))

type SimpleLog = DList (WithSeverity SimpleLogEntry)

{- | Fold a function across a stream; intended for use as a subclause of other
     folds. -}
foldDocStream ‚à∑ (SimpleDocStream Œ± ‚Üí SimpleDocStream Œ±) ‚Üí SimpleDocStream Œ±
              ‚Üí SimpleDocStream Œ±
foldDocStream f (SText l t rest)    = SText l t (f rest)
foldDocStream f (SLine i rest)      = SLine i (f rest)
foldDocStream f (SChar c rest)      = SChar c (f rest)
foldDocStream f (SAnnPush ann rest) = SAnnPush ann (f rest)
foldDocStream f (SAnnPop rest)      = SAnnPop (f rest)
foldDocStream _ SEmpty              = SEmpty
foldDocStream _ SFail               = SFail

dropEmptyAnnotations ‚à∑ SimpleDocStream Œ± ‚Üí SimpleDocStream Œ±
dropEmptyAnnotations (SAnnPush _ (SAnnPop rest)) = dropEmptyAnnotations rest
dropEmptyAnnotations ss = foldDocStream dropEmptyAnnotations ss

{- | Filter a doc stream on annotations; only annotations that match the given
     predicate may pass. -}
filterDocStream ‚à∑ (Œ± ‚Üí ùîπ) ‚Üí SimpleDocStream Œ± ‚Üí SimpleDocStream Œ±
filterDocStream p = dropEmptyAnnotations ‚àò go []
  where
    -- For Text,Char,Line; filter out things that match the predicate, else
    -- just keep calm & carry on.
    go (stack@(s:_)) (SText l t rest) | p s = SText l t (go stack rest)
                                      | otherwise = go stack rest
    go (stack@(s:_)) (SChar c rest)   | p s = SChar c (go stack rest)
                                      | otherwise = go stack rest
    go (stack@(s:_)) (SLine i rest)   | p s = SLine i (go stack rest)
                                      | otherwise = go stack rest

    -- Stack push & pop.
    go stack         (SAnnPush ann rest) = SAnnPush ann (go (ann : stack) rest)
    go (_:stack)     (SAnnPop rest)      = SAnnPop (go stack rest)

    go stack ss = foldDocStream (go stack) ss

filterDocTests ‚à∑ TestTree
filterDocTests =
  let -- note that sdoc has SText ("begin"), SLine (line), and SChar (hsep)
      sdoc ‚à∑ SimpleDocStream IOClass
      sdoc = layoutPretty defaultLayoutOptions
                          (—éÃÑ [ "begin"
                             , line
                             , hsep [ annotate IORead "ioread"
                                    , annotate IOCmdR "iocmdr"
                                    , annotate IOWrite "iowrite"
                                    ]
                             , line
                             , "end"
                             ])
      sdoc_none ‚à∑ SimpleDocStream IOClass
      sdoc_none = layoutPretty defaultLayoutOptions
                               (—éÃÑ [ "begin", line, hsep [ "","", "" ], line
                                  , "end" ])

      sdoc_internal ‚à∑ SimpleDocStream IOClass
      sdoc_internal = layoutPretty defaultLayoutOptions
                                   (—éÃÑ [ "begin"
                                      , line
                                      , hsep [ annotate IORead "ioread", ""
                                             , annotate IOWrite "iowrite"
                                             ]
                                      , line
                                      , "end"
                                      ])

   in testGroup "filterDoc"
                [ testCase "all may pass" $
                    sdoc @=? filterDocStream (const True) sdoc
                , testCase "none shall pass" $
                    sdoc_none @=? filterDocStream (const False) sdoc
                , testCase "isInternalIO" $
                    sdoc_internal @=? filterDocStream isInternalIO sdoc
                ]

logit ‚à∑ IO ()
logit = (\io -> withFDHandler defaultBatchingOptions stderr 0.01 5 (\lg -> runLoggingT io (lg ‚àò renderWithSeverity id))) (Control.Monad.Log.logInfo "mary had a little lamb")

logit' ‚à∑ (MonadIO Œº, MonadMask Œº) ‚áí Œº ()
logit' = (\io->withFDHandler defaultBatchingOptions stderr 0.01 5 (\lg->runLoggingT io (lg ‚àò renderLog))) (logIO Informational "log this" >>= logMessage )
logit'' ‚à∑ (MonadIO Œº, MonadMask Œº) ‚áí Œº ()
logit'' = (\io->withFDHandler defaultBatchingOptions stderr 0.01 5 (\lg->runLoggingT io (lg ‚àò renderLog'))) (logIO Informational "log this" >>= logMessage )
-- [Sat 2020-04-04Z06:37:49] [Info ] log this
--                                    logIO, called at <interactive>:375:99 in interactive:Ghci10


-- logit' ‚à∑ IO ()
-- logit' = (\io -> withFDHandler defaultBatchingOptions stderr 0.01 5 (\lg -> runLoggingT io (lg ‚àò renderWithTimestamp (formatTime defaultTimeLocale rfc822DateFormat) ‚àò renderWithSeverity id))) (timestamp $ Control.Monad.Log.logInfo "mary had a little lamb")

{-

import qualified Data.Text.Lazy as LT
import qualified Data.Text.Prettyprint.Doc as PP
import qualified Data.Text.Prettyprint.Doc.Render.Text as PP

-- | Given a way to render the underlying message @a@, render a message with its
-- severity.
--
-- >>> renderWithSeverity id (WithSeverity Informational "Flux capacitor is functional")
-- [Informational] Flux capacitor is functional
renderWithSeverity
  :: (a -> PP.Doc ann) -> (WithSeverity a -> PP.Doc ann)
renderWithSeverity k (WithSeverity u a) =
  PP.brackets (PP.pretty u) PP.<+> PP.align (k a)

-- >>> renderWithTimestamp (formatTime defaultTimeLocale rfc822DateFormat) id timestamppedLogMessage
-- [Tue, 19 Jan 2016 11:29:42 UTC] Setting target speed to plaid
renderWithTimestamp :: (UTCTime -> String)
                       -- ^ How to format the timestamp.
                    -> (a -> PP.Doc ann)
                       -- ^ How to render the rest of the message.
                    -> (WithTimestamp a -> PP.Doc ann)
renderWithTimestamp formatter k (WithTimestamp a t) =
  PP.brackets (PP.pretty (LT.pack (formatter t))) PP.<+> PP.align (k a)

-- | Given a way to render the underlying message @a@ render a message with a
-- callstack.
--
-- The callstack will be pretty-printed underneath the log message itself.
renderWithCallStack :: (a -> PP.Doc ann) -> WithCallStack a -> PP.Doc ann
renderWithCallStack k (WithCallStack stack msg) =
  k msg <> PP.line <> PP.indent 2 (prettyCallStack (getCallStack stack))


-- | Construct a 'WithCallStack' log message.
--
-- This should normally be preferred over just using 'WithCallStack' as it will
-- append a new entry to the stack - pointing to this exact log line. However,
-- if you are creating a combinator (such as a wrapper that logs and throws
-- an exception), you may be better manually capturing the 'CallStack' and
-- using 'WithCallStack'.
withCallStack :: (?stack :: CallStack) => a -> WithCallStack a
withCallStack = WithCallStack ?stack
-}

{- | Note the awkward capitalization, to avoid clashing with
     `GHC.Stack.HasCallStack` -}
class HasCallstack Œ± where
  callStack' ‚à∑ Lens' Œ± CallStack

instance HasCallstack CallStack where
  callStack' = id

stackHead ‚à∑ HasCallstack Œ± ‚áí Œ± ‚Üí Maybe (String,SrcLoc)
stackHead = headMay ‚àò getCallStack ‚àò view callStack'

class WithCallStack œâ where
  type CSElement œâ
  withCallStack ‚à∑ (?stack ‚à∑ CallStack, HasCallStack) ‚áí CSElement œâ ‚Üí œâ
  csDiscard ‚à∑ œâ -> CSElement œâ
  _callStack_ ‚à∑ œâ ‚Üí CallStack

instance WithCallStack CallStack where
  type CSElement CallStack = ()
  withCallStack () = ?stack
  csDiscard _ = ()
  _callStack_ w = w

instance WithCallStack (Control.Monad.Log.WithCallStack Œ±) where
  type CSElement (Control.Monad.Log.WithCallStack Œ±) = Œ±
  withCallStack = Control.Monad.Log.withCallStack
  csDiscard w = Control.Monad.Log.discardCallStack w
  _callStack_ w = Control.Monad.Log.msgCallStack w

instance WithCallStack (CallStack, Œ±) where
  type CSElement (CallStack, Œ±) = Œ±
  withCallStack = (?stack,)
  csDiscard = snd
  _callStack_ = fst

instance WithCallStack (CallStack, Œ±, Œ≤) where
  type CSElement (CallStack,Œ±,Œ≤) = (Œ±,Œ≤)
  withCallStack (a,b) = (?stack,a,b)
  csDiscard (_,a,b)   = (a,b)
  _callStack_ (cs,_,_)  = cs

instance WithCallStack (CallStack, Œ±, Œ≤, Œ≥) where
  type CSElement (CallStack,Œ±,Œ≤,Œ≥) = (Œ±,Œ≤,Œ≥)
  withCallStack (a,b,c) = (?stack,a,b,c)
  csDiscard (_,a,b,c)   = (a,b,c)
  _callStack_ (cs,_,_,_)  = cs

prettyCallStack ‚à∑ [(String,SrcLoc)] ‚Üí Doc ann
prettyCallStack [] = "empty callstack"
prettyCallStack (root:rest) =
  prettyCallSite root ‚äï line ‚äï indent 2 (vsep (prettyCallSite ‚ä≥ rest))
  where prettyCallSite (f,loc) =
          pretty (LT.pack f) ‚äï ", called at " ‚äï
          pretty (LT.pack (GHC.Stack.prettySrcLoc loc))

renderWithCallStack ‚à∑ HasCallstack Œ¥ ‚áí (Œ¥ -> Doc œÅ) -> Œ¥ -> Doc œÅ
renderWithCallStack f m =
  f m ‚äï line ‚äï indent 2 (prettyCallStack (getCallStack $ m ‚ä£ callStack'))

renderWithStackHead ‚à∑ HasCallstack Œ¥ ‚áí (Œ¥ -> Doc œÅ) -> Œ¥ -> Doc œÅ
renderWithStackHead f m =
  let renderStackHead = renderLocation ‚àò fmap snd
   in renderStackHead (stackHead m) ‚äû align (f m)

locToString ‚à∑ SrcLoc ‚Üí String
locToString loc = "¬´" ‚äï srcLocFile loc ‚äï "#" ‚äï show (srcLocStartLine loc) ‚äï "¬ª"

renderLocation ‚à∑ Maybe SrcLoc ‚Üí Doc Œ±
renderLocation (Just loc) = pretty $ locToString loc
renderLocation Nothing    = emptyDoc

stackHeadTxt ‚à∑ HasCallstack Œ± ‚áí Œ± ‚Üí Text
stackHeadTxt a = case locToString ‚©∫ fmap snd $ stackHead a of
                   Just s  ‚Üí pack s 
                   Nothing ‚Üí ""

{-
Œª> :t renderWithSeverity' (Main.renderWithCallStack pretty)
renderWithSeverity' (Main.renderWithCallStack pretty)
  :: forall {a} {ann}.
     (HasSeverity a, Main.WithCallStack a, Pretty a) =>
     a -> Doc ann


Œª> :t renderWithSeverity (Main.renderWithCallStack id)
renderWithSeverity (Main.renderWithCallStack id)
  :: forall {ann}.
     Main.WithCallStack (Doc ann) =>
     WithSeverity (Doc ann) -> Doc ann

-}

class HasUTCTime Œ± where
  utcTime ‚à∑ Lens' Œ± UTCTime

instance HasUTCTime UTCTime where
  utcTime = id

class HasSeverity Œ± where
  severity ‚à∑ Lens' Œ± Severity

instance HasSeverity Severity where
  severity = id

infixr 5 ‚äû
-- hsep
(‚äû) ‚à∑ Doc Œ± ‚Üí Doc Œ± ‚Üí Doc Œ±
(‚äû) = (<+>)

renderWithSeverity' ‚à∑ HasSeverity œÑ ‚áí (œÑ ‚Üí Doc œÅ) ‚Üí œÑ ‚Üí Doc œÅ
renderWithSeverity' f m =
  let pp ‚à∑ HasSeverity Œ± ‚áí Œ± ‚Üí Doc ann
      pp sv = pretty $ case sv ‚ä£ severity of
                         Emergency     ‚Üí ("EMRG" ‚à∑ Text)
                         Alert         ‚Üí "ALRT"
                         Critical      ‚Üí "CRIT"
                         Warning       ‚Üí "Warn"
                         Notice        ‚Üí "Note"
                         Informational ‚Üí "Info"
                         Debug         ‚Üí "Debg"
   in brackets (pp m) ‚äû align (f m)


{- | Log with timestamp, callstack, severity & IOClass -}
data LogEntry = LogEntry { _callstack ‚à∑ CallStack
                         , _timestamp ‚à∑ UTCTime
                         , _severity  ‚à∑ Severity
                         , _logdoc    ‚à∑ Doc ()
                         }
  deriving Show

logdoc ‚à∑ Lens' LogEntry (Doc ())
logdoc = lens _logdoc (\ le txt ‚Üí le { _logdoc = txt })

{- | Render an instance of a `Pretty` type to text, with default options. -}
renderDoc ‚à∑ Doc Œ± ‚Üí Text
renderDoc = renderStrict ‚àò layoutPretty defaultLayoutOptions

data LogRenderType = LRO_Plain
                   | LRO_Severity
                   | LRO_TimeStamp
                   | LRO_StackHead
                   | LRO_StackHeadTS
                   | LRO_Stack
                   | LRO_StackTS
  deriving Show

     
type LogRenderer = (LogEntry ‚Üí Doc ()) ‚Üí LogEntry ‚Üí Doc ()

data LogRenderOpts =
  LogRenderOpts { {-| List of log renderers; applied in list order, tail of the
                      list first; hence, given that many renderers add something
                      to the LHS, the head of the list would be lefthand-most in
                      the resulting output.
                   -}
                  _lroRenderers  ‚à∑ [LogRenderer]
                , _lroWidth      ‚à∑ PageWidth
--                , _lroType       ‚à∑ LogRenderType
                }

{- | `LogRenderOpts` with no adornments.  Page width is `Unbounded`; you can
     override this with lens syntax, e.g.,

     > lroRenderPlain & lroWidth .~ AvailablePerLine 80 1.0
 -}
lroRenderPlain ‚à∑ LogRenderOpts
lroRenderPlain = LogRenderOpts [] Unbounded -- LRO_Plain

{- | `LogRenderOpts` with timestamp & severity.
 -}
lroRenderTSSev ‚à∑ LogRenderOpts
lroRenderTSSev = LogRenderOpts [ renderWithTimestamp, renderWithSeverity' ] Unbounded -- LRO_Plain

{- | `LogRenderOpts` with severity & callstack.
 -}
lroRenderSevCS ‚à∑ LogRenderOpts
lroRenderSevCS = LogRenderOpts [ renderWithCallStack, renderWithSeverity' ] Unbounded

{- | `LogRenderOpts` with timestamp, severity & callstack.
 -}
lroRenderTSSevCS ‚à∑ LogRenderOpts
lroRenderTSSevCS = LogRenderOpts [ renderWithCallStack, renderWithTimestamp, renderWithSeverity' ] Unbounded -- LRO_Plain

{- | `LogRenderOpts` with severity & callstack head.
 -}
lroRenderSevCSH ‚à∑ LogRenderOpts
lroRenderSevCSH = LogRenderOpts [ renderWithSeverity', renderWithStackHead ] Unbounded -- LRO_Plain

{- | `LogRenderOpts` with timestamp, severity & callstack head.
 -}
lroRenderTSSevCSH ‚à∑ LogRenderOpts
lroRenderTSSevCSH = LogRenderOpts [ renderWithTimestamp, renderWithSeverity', renderWithStackHead ] Unbounded -- LRO_Plain

-- lroType ‚à∑ Lens' LogRenderOpts LogRenderType
-- lroType = lens _lroType (\ opts typ ‚Üí opts { _lroType = typ })
lroRenderers ‚à∑ Lens' LogRenderOpts [(LogEntry ‚Üí Doc ())‚Üí LogEntry ‚Üí Doc ()]
lroRenderers = lens _lroRenderers (\ opts rs ‚Üí opts { _lroRenderers = rs })

lroRenderer ‚à∑ LogRenderOpts ‚Üí LogEntry ‚Üí Doc ()
lroRenderer opts = let foldf ‚à∑ Foldable œà ‚áí œà (Œ± ‚Üí Œ±) ‚Üí Œ± ‚Üí Œ±
                       foldf = flip (foldr ($))
                    in foldf (opts ‚ä£ lroRenderers) (view logdoc)

lroRendererTests ‚à∑ TestTree
lroRendererTests =
  let check nme exp rs = let opts     = LogRenderOpts rs Unbounded -- LRO_Stack
                             rendered = lroRenderer opts _le0
                          in testCase nme $ exp ‚âü renderDoc rendered
      checks nme exp rs = let opts     = LogRenderOpts rs Unbounded -- LRO_Stack
                              rendered = lroRenderer opts _le0
                           in assertListEq nme exp (T.lines $renderDoc rendered)
   in testGroup "lroRenderer"
                [ check "plain" "log_entry 1" []
                , check "sev" "[Info] log_entry 1" [renderWithSeverity']
                , check "ts" "[Thu 1970-01-01Z00:00:00] log_entry 1"
                             [renderWithTimestamp]
                , check "ts" "¬´c#1¬ª log_entry 1" [renderWithStackHead]
                , checks "cs" [ "log_entry 1"
                              , "  stack0, called at c:1:2 in a:b"
                              , "    stack1, called at f:5:6 in d:e"
                              ]
                             [renderWithCallStack]
                , check "ts-sev"
                    "[Thu 1970-01-01Z00:00:00] [Info] log_entry 1"
                        [renderWithTimestamp,renderWithSeverity']
                , check "sev-ts"
                    "[Info] [Thu 1970-01-01Z00:00:00] log_entry 1"
                        [renderWithSeverity',renderWithTimestamp]
                , checks "ts-sev-cs"
                         [ "[Thu 1970-01-01Z00:00:00] [Info] log_entry 1"
                         ,   "                                 "
                           ‚äï "  stack0, called at c:1:2 in a:b"
                         ,   "                                 "
                           ‚äï "    stack1, called at f:5:6 in d:e"
                         ]
                         [ renderWithTimestamp, renderWithSeverity'
                         , renderWithCallStack ]
                , checks "cs-ts-sev"
                         [ "[Thu 1970-01-01Z00:00:00] [Info] log_entry 1"
                         , "  stack0, called at c:1:2 in a:b"
                         , "    stack1, called at f:5:6 in d:e"
                         ]
                         [ renderWithCallStack
                         , renderWithTimestamp, renderWithSeverity' ]
                , checks "sev-cs-ts"
                         [ "[Info] [Thu 1970-01-01Z00:00:00] log_entry 1"
                         , "         stack0, called at c:1:2 in a:b"
                         , "           stack1, called at f:5:6 in d:e"
                         ]
                         [ renderWithSeverity', renderWithCallStack
                         , renderWithTimestamp ]
                ]

lroWidth ‚à∑ Lens' LogRenderOpts PageWidth
lroWidth = lens _lroWidth (\ opts w ‚Üí opts { _lroWidth = w })

lroOpts ‚à∑ Lens' LogRenderOpts LayoutOptions
lroOpts = lens (LayoutOptions ‚àò _lroWidth) (\ opts lo ‚Üí opts { _lroWidth = layoutPageWidth lo })

instance Default LogRenderOpts where
  def = LogRenderOpts [] Unbounded -- LRO_TimeStamp

{- | Render logs to stderr. -}
logsToStderr ‚à∑ MonadIO Œº ‚áí LogRenderOpts ‚Üí PureLoggingT Log Œº Œ± ‚Üí Œº Œ±
logsToStderr opts io = do
  (x,ts) ‚Üê logRender opts io
  mapM_ say ts
  return x

logRender ‚à∑ Monad Œ∑ ‚áí LogRenderOpts ‚Üí PureLoggingT Log Œ∑ Œ± ‚Üí Œ∑ (Œ±, DList Text)
logRender opts a = do
  let -- render ‚à∑ [Doc () ‚Üí Doc ()] ‚Üí LogEntry ‚Üí Doc ()
      -- render = foldf (view logdoc) (opts ‚ä£ lroRenderers)
      renderer = {- case opts ‚ä£ lroType of
                   LRO_Plain ‚Üí view logdoc
                   _         ‚Üí renderWithSeverity' (renderWithStackHead (view logdoc))
                 -}
                 lroRenderer opts
  (a',ls) ‚Üê runPureLoggingT a
  return ‚àò (a',) $ renderStrict ‚àò layoutPretty (opts ‚ä£ lroOpts) ‚àò renderer ‚ä≥ unLog ls

{- | `logRender` with `()` is sufficiently common to warrant a cheap alias. -}
logRender' ‚à∑ Monad Œ∑ ‚áí LogRenderOpts ‚Üí PureLoggingT Log Œ∑ () ‚Üí Œ∑ (DList Text)
logRender' = fmap snd ‚©∫ logRender

{- | Render logs to text, including severity. -}
renderLogs ‚à∑ Monad Œ∑ ‚áí PureLoggingT Log Œ∑ Œ± ‚Üí Œ∑ (Œ±, DList Text)
renderLogs a = do
  (a',ls) ‚Üê runPureLoggingT a
  return ‚àò (a',) $ renderDoc ‚àò renderWithSeverity' (renderWithStackHead (view logdoc)) ‚ä≥ unLog ls

renderLogsSt ‚à∑ Monad Œ∑ ‚áí PureLoggingT Log Œ∑ Œ± ‚Üí Œ∑ (Œ±, DList Text)
renderLogsSt a = do
  (a',ls) ‚Üê runPureLoggingT a
  return ‚àò (a',) $ renderDoc ‚àò renderWithSeverity' (renderWithStackHead (view logdoc)) ‚ä≥ unLog ls

{- | Performing renderLogs, with IO returning () is sufficiently common to
     warrant a cheap alias. -}
renderLogs' ‚à∑ Monad Œ∑ ‚áí PureLoggingT Log Œ∑ () ‚Üí Œ∑ (DList Text)
renderLogs' = snd ‚©∫ renderLogs

{- | Render an instance of a `Pretty` type to text, with default options. -}
renderText ‚à∑ Pretty Œ± ‚áí Œ± ‚Üí Text
renderText = renderDoc ‚àò pretty

instance Printable LogEntry where
  print le =
    P.text $ [fmt|[%t|%-4t] %t %t|] (formatUTCDoW $ le ‚ä£ utcTime) (take 4 ‚àò pack ‚àò show $ le ‚ä£ severity) (stackHeadTxt le) (renderDoc $ le ‚ä£ logdoc)

newtype Log = Log { unLog ‚à∑ DList LogEntry }
  deriving (Monoid,Semigroup,Show)

-- instance Pretty Log where
--   pretty (Log logs) = vsep (pretty ‚ä≥ toList logs)

instance Printable Log where
  print = P.text ‚àò unlines ‚àò toList ‚àò fmap toText ‚àò unLog

instance WithCallStack LogEntry where
  type CSElement LogEntry = (Doc(),UTCTime,Severity)
  withCallStack (txt,tm,sv) = LogEntry (popCallStack ?stack) tm sv txt
  {-# INLINE withCallStack #-}
  csDiscard (LogEntry _ tm sv txt)   = (txt,tm,sv)
  _callStack_ (LogEntry cs _ _ _ )  = cs

instance HasCallstack LogEntry where
  callStack' = lens _callstack (\ le cs ‚Üí le { _callstack = cs })

instance HasSeverity LogEntry where
  severity = lens _severity (\ le sv ‚Üí le { _severity = sv })

instance HasUTCTime LogEntry where
  utcTime = lens _timestamp (\ le tm ‚Üí le { _timestamp = tm })

assertEq' ‚à∑ (Eq t, HasCallStack) ‚áí (t ‚Üí Text) ‚Üí t ‚Üí t ‚Üí Assertion
assertEq' toT expected got =
  let toS = toString ‚àò toT
   in -- equalize prefix lengths to make it easier to diff strings, etc.
       assertBool ("expected: " ‚äï toS expected ‚äï "\nbut got : " ‚äï toS got)
                  (got ‚â° expected)

{- | Compare two lists for equality, with itemized testing.  We take the inputs
     as IO to allow for, well, IO.
 -}
assertListEqIO' ‚à∑ (Foldable œà, Foldable œÜ, Eq Œ±, Printable œÉ, HasCallStack) ‚áí
                  (Œ± ‚Üí Text) ‚Üí œÉ ‚Üí œà Œ± ‚Üí IO (œÜ Œ±) ‚Üí TestTree
assertListEqIO' toT name (toList ‚Üí expect) (fmap toList ‚Üí got) =
  let lCheck e g =
        assertBool ("length " ‚äï show g ‚äï " did not match expected " ‚äï show e)
                   (e ‚â° g)
      lengthCheck e g = lCheck (length e) (length g)
      assertItem (i,e) =
        testCase (show i) (got ‚â´ \ g ‚Üí assertEq' toT' (Just e) (atMay g i))
      toT' Nothing  = "Nothing"
      toT' (Just a) = "Just " ‚äï toT a

   in testGroup (toString name) $
          testCase "count" (got ‚â´ lengthCheck expect)
        : (assertItem ‚ä≥ zip [0..] expect)

assertListEqIO ‚à∑ (Foldable œà, Foldable œÜ, Eq Œ±, Printable Œ±, HasCallStack) ‚áí
                Text ‚Üí œà Œ± ‚Üí IO (œÜ Œ±) ‚Üí TestTree
assertListEqIO = assertListEqIO' toText

-- | compare two lists for equality, with itemized testing
assertListEq ‚à∑ (Eq Œ±, Printable Œ±, Foldable œà, Foldable œÜ, HasCallStack) ‚áí
               Text ‚Üí œà Œ± ‚Üí œÜ Œ± ‚Üí TestTree
assertListEq name exp got = assertListEqIO name exp (return got)

renderLogWithoutTimeStamp ‚à∑ LogEntry ‚Üí Doc ()
renderLogWithoutTimeStamp = renderWithSeverity' $ renderWithCallStack (view logdoc)

renderLog ‚à∑ LogEntry ‚Üí Doc ()
renderLog = renderWithTimestamp ‚àò renderWithSeverity' $ renderWithCallStack (view logdoc)

renderLog' ‚à∑ LogEntry ‚Üí Doc ()
renderLog' = renderWithTimestamp ‚àò renderWithSeverity' $ renderWithStackHead (view logdoc)

{-
renderWithTimestamp ‚à∑ (UTCTime ‚Üí String)
                       -- ^ How to format the timestamp.
                    ‚Üí (a ‚Üí PP.Doc ann)
                       -- ^ How to render the rest of the message.
                    ‚Üí (WithTimestamp a ‚Üí PP.Doc ann)
-}
-- Add this to tfmt?
{- | Format a UTCTime, in almost-ISO8601-without-fractional-seconds (always in Zulu). -}
formatUTC ‚à∑ UTCTime ‚Üí Text
formatUTC = pack ‚àò formatTime defaultTimeLocale "%FZ%T"

{- | Format a UTCTime, in ISO8601-without-fractional-seconds (always in Zulu),
     with a leading 3-letter day-of-week -}
formatUTCDoW ‚à∑ UTCTime ‚Üí Text
formatUTCDoW = pack ‚àò formatTime defaultTimeLocale "%a %FZ%T"


renderWithTimestamp f m =
  brackets (pretty (formatUTCDoW $ m ‚ä£ utcTime)) ‚äû align (f m)

withResource2 ‚à∑ IO Œ± ‚Üí (Œ± ‚Üí IO()) ‚Üí IO Œ≤ ‚Üí (Œ≤ ‚Üí IO ()) ‚Üí (IO Œ± ‚Üí IO Œ≤ ‚ÜíTestTree)
              ‚Üí TestTree
withResource2 gain lose gain' lose' ts =
  withResource gain lose (\ x ‚Üí withResource gain' lose' (\ x' ‚Üí ts x x'))

withResource2' ‚à∑ IO Œ± ‚Üí IO Œ≤ ‚Üí (IO Œ± ‚Üí IO Œ≤ ‚Üí TestTree)
              ‚Üí TestTree
withResource2' gain gain' ts =
  withResource' gain (\ x ‚Üí withResource' gain' (\ x' ‚Üí ts x x'))

writerMonadTests ‚à∑ TestTree
writerMonadTests =
  let helloEntry = fromList [ SimpleLogEntry(IORead,"Hello") ]
      readFn ‚à∑ (MonadIO Œº, MonadWriter (DList SimpleLogEntry) Œº) ‚áí FilePath ‚Üí Mock ‚Üí Œº Text
      readFn fn mock = runLoggingT (mkIO' (const helloEntry) "mockety"
                                         (readFile fn) mock) tell
   in testGroup "writerMonad"
                [ withResource2' (runWriterT $ readFn "/etc/subgid" NoMock)
                                 (readFile "/etc/subgid") $ \ txtlog exptxt ‚Üí
                    testGroup "NoMock"
                              [ testCase "txt" $ do (txt,_) ‚Üê txtlog
                                                    exp ‚Üê exptxt
                                                    exp ‚âü txt
                              , testCase "log" $ do (_,log) ‚Üê txtlog
                                                    helloEntry @=? log
                              ]
                , withResource' (runWriterT $ readFn "/etc/subgid" DoMock) $
                    \ txtlog ‚Üí
                    testGroup "DoMock"
                              [ testCase "txt" $ do (txt,_) ‚Üê txtlog
                                                    "mockety" ‚âü txt
                              , testCase "log" $ do (_,log) ‚Üê txtlog
                                                    helloEntry @=? log
                              ]
                ]

pureLoggingTests ‚à∑ TestTree
pureLoggingTests =
  let helloEntry = fromList [ SimpleLogEntry(IORead,"Hello") ]
      readFn' ‚à∑ (MonadIO Œº) ‚áí FilePath ‚Üí Mock ‚Üí Œº (Text, DList SimpleLogEntry)
      readFn' fn mock = runPureLoggingT (mkIO' (const helloEntry) "mockety"
                                        (readFile fn) mock)
   in testGroup "pureLogging"
                [ withResource2' (readFn' "/etc/subgid" NoMock)
                                 (readFile "/etc/subgid") $ \ txtlog exptxt ‚Üí
                    testGroup "NoMock"
                              [ testCase "txt" $ do (txt,_) ‚Üê txtlog
                                                    exp ‚Üê exptxt
                                                    exp ‚âü txt
                              , testCase "log" $ do (_,log) ‚Üê txtlog
                                                    helloEntry @=? log
                              ]
                , withResource' (readFn' "/etc/subgid" DoMock) $ \ txtlog ‚Üí
                    testGroup "DoMock"
                              [ testCase "txt" $ do (txt,_) ‚Üê txtlog
                                                    "mockety" ‚âü txt
                              , testCase "log" $ do (_,log) ‚Üê txtlog
                                                    helloEntry @=? log
                              ]
                ]

-- XXX simplify logging
-- XXX simple functions for severity

data IOClass = IORead  -- ^ An IO action that perceives but does not alter state
             | IOWrite -- ^ An IO action that may alter state
             | IOCmdR  -- ^ An external cmd (results in an execve or fork call)
                       --   that perceives but does not alter state
             | IOCmdW  -- ^ An external cmd (results in an execve or fork call)
                       --   that may alter state
             | IOExec  -- ^ An exec (replaces this executable)
  deriving (Eq,Show)

class HasIOClass Œ± where
  ioClass ‚à∑ Lens' Œ± IOClass

instance HasIOClass IOClass where
  ioClass = id

{-| Predicate for IO that outside of this process; that is, exclude `IORead` &
    `IOWrite`; leaving `IOCmdR`, `IOCmdW`, `IOExec`. -}
isExternalIO ‚à∑ HasIOClass Œ± ‚áí Œ± -> ùîπ
isExternalIO a = case a ‚ä£ ioClass of
                   IORead  ‚Üí False
                   IOWrite ‚Üí False
                   IOCmdR  ‚Üí True
                   IOCmdW  ‚Üí True
                   IOExec  ‚Üí True

{-| Logical inverse of `isExternalIO`. -}
isInternalIO ‚à∑ HasIOClass Œ± ‚áí Œ± -> ùîπ
isInternalIO = not ‚àò isExternalIO

{-
logMsg ‚à∑ MonadLog (DList (WithSeverity SimpleLogEntry)) Œ∑ ‚áí
         Severity ‚Üí IOClass ‚Üí Text ‚Üí Œ∑ ()
logMsg sv clss msg = logMessage $ [WithSeverity sv (SimpleLogEntry(clss,msg))]

logInfo ‚à∑ MonadLog (DList (WithSeverity SimpleLogEntry)) Œ∑ ‚áí
          IOClass ‚Üí Text ‚Üí Œ∑ ()
logInfo = logMsg Informational
-}

{- | "Log Message" the noun, rather than the verb; turn a simple message into a
     Log Message, with IOClass & Severity. -}
logMsg ‚à∑ Severity ‚Üí IOClass ‚Üí Text ‚Üí DList (WithSeverity SimpleLogEntry)
logMsg sv clss msg = fromList [WithSeverity sv (SimpleLogEntry(clss,msg))]

logInfo ‚à∑ IOClass ‚Üí Text ‚Üí DList (WithSeverity SimpleLogEntry)
logInfo = logMsg Informational

logMsgTests ‚à∑ TestTree
logMsgTests =
  let helloEnt = fromList [ WithSeverity Informational $ SimpleLogEntry(IORead,"hello") ]
      readFn' ‚à∑ (MonadIO Œº) ‚áí FilePath ‚Üí Mock ‚Üí Œº (Text, SimpleLog)
      readFn' fn mock = runPureLoggingT (mkIO' (const $ logInfo IORead "hello")
                                        "mockety" (readFile fn) mock)
   in withResource2' (readFn' "/etc/subgid" NoMock)
                     (readFile "/etc/subgid") $ \ txtlog exptxt ‚Üí
        testGroup "logMsg"
                  [ testCase "txt" $ do (txt,_) ‚Üê txtlog
                                        exp ‚Üê exptxt
                                        exp ‚âü txt
                  , testCase "log" $ do (_,log) ‚Üê txtlog
                                        helloEnt @=? log
                  ]

data WithAttr Œ≤ Œ± = WithAttr { attr ‚à∑ Œ≤, datum ‚à∑ Œ± }
  deriving (Eq,Functor,Show)

testApp ‚à∑ MonadLog (WithSeverity (Doc ann)) m => m ()
testApp = do
  logMessage (WithSeverity Informational "Don't mind me")
  logMessage (WithSeverity Error "But do mind me!")

—éÃÑ ‚à∑ Monoid Œ± ‚áí [Œ±] ‚Üí Œ±
—éÃÑ = —é

sdoc ‚à∑ SimpleDocStream IOClass
sdoc = layoutPretty defaultLayoutOptions (—éÃÑ [ "begin"
                                            , line
                                            , hsep [ annotate IORead "ioread"
                                                   , annotate IOWrite "iowrite"
                                                   , annotate IOCmdR "iocmdr"
                                                   ]
                                            , line
                                            , "end"
                                            ])

sdoc' = —éÃÑ [ "begin"
          , line
          , hsep [ annotate IORead "ioread"
                 , annotate IOCmdR "iocmdr"
                 , annotate IOWrite "iowrite"
                 ]
          , line
          , "end"
          ]

sdoc_none ‚à∑ SimpleDocStream IOClass
sdoc_none = layoutPretty defaultLayoutOptions
                         (—éÃÑ [ "begin"
                            , line
                            , hsep [ annotate IORead —Ñ
                                   , annotate IOWrite —Ñ
                                   , annotate IOCmdR —Ñ
                                   ]
                            , line
                            , "end"
                            ])


_renderSimplyDecorated ‚à∑ (Monoid Œ±, HasIOClass Œ¥, Show Œ¥) ‚áí
                        (Text ‚Üí Œ±) ‚Üí (Œ¥ ‚Üí Œ±) ‚Üí (Œ¥ ‚Üí Œ±) ‚Üí SimpleDocStream Œ¥ ‚Üí Œ±
_renderSimplyDecorated text push pop = go []
  where
    go _           SFail               = panicUncaughtFail
    go []          SEmpty              = —Ñ
    go (_:_)       SEmpty              = panicInputNotFullyConsumed
    go []          (SChar c rest)      = text (T.singleton c) ‚äï go []    rest
    go []          (SText _l t rest)   = text t ‚äï go []    rest
    go []          (SLine i rest)      = text (T.singleton '\n') ‚äï text (T.replicate i " ") ‚äï go [] rest
    go stack       (SChar c rest)      = text (T.singleton c) ‚äï go stack rest
    go stack@(s:_) (SText _l t rest) | s ‚ä£ ioClass ‚â° IORead = go stack rest
                                     | otherwise            = text (pack $ "]>" ‚äï show stack ‚äï "<[") ‚äï text t ‚äï go stack rest
    go stack       (SLine i rest)      = text (T.singleton '\n') ‚äï text (T.replicate i " ") ‚äï go stack rest
    go stack       (SAnnPush ann rest) = push ann ‚äï go (ann : stack) rest
    go (ann:stack) (SAnnPop rest)      = pop ann ‚äï go stack rest
    go []          SAnnPop{}           = panicUnpairedPop

-- Œª> let sdoc = layoutPretty defaultLayoutOptions ("hello" <+> annotate IORead "world" <+> annotate IOWrite "and mum" <> "!")
-- Œª> Data.Text.IO.putStrLn (Main.renderSimplyDecorated id (\ _ -> ">>>") (\ _ -> "<<<") sdoc)


--------------------------------------------------------------------------------
--                                   tests                                    --
--------------------------------------------------------------------------------

tests ‚à∑ TestTree
tests = testGroup "MockIO" [ filterDocTests, writerMonadTests, pureLoggingTests
                           , logMsgTests, renderTests, lroRendererTests ]

----------------------------------------

_test ‚à∑ IO ExitCode
_test = runTestTree tests

--------------------

_tests ‚à∑ String ‚Üí IO ExitCode
_tests = runTestsP tests

_testr ‚à∑ String ‚Üí ‚Ñï ‚Üí IO ExitCode
_testr = runTestsReplay tests

-- that's all, folks! ----------------------------------------------------------
