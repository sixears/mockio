{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE UnicodeSyntax     #-}

module MonadError.IO.Error2
  ( module MonadError.IO.Error
  , isInappropriateTypeError
  , squashInappropriateType, squashInappropriateTypeB, squashInappropriateTypeT
  )
where

import MonadError.IO.Error
import System.IO.Error.Lens  ( _InappropriateType )
import System.IO.Error         ( ioeGetErrorType )
import Data.MoreUnicode      ( ùîπ )
import Data.Function.Unicode  ( (‚àò) )
import Control.Lens.Fold     ( has )
import Control.Lens.Getter   ( to )
import Data.Either           ( Either )
import Data.Maybe           ( Maybe )
import Data.Functor ( fmap )
import Control.Monad  ( join )

-- mtl ---------------------------------

import Control.Monad.Except  ( ExceptT, MonadError )

import MonadError  ( splitMError )

--------------------------------------------------------------------------------

{- | Is a given IOError a NoSuchThing (DoesNotExist)? -}
isInappropriateTypeError ‚à∑ AsIOError Œµ ‚áí Œµ ‚Üí ùîπ
isInappropriateTypeError =
  has (_IOErr ‚àò to ioeGetErrorType ‚àò _InappropriateType )

{- | Given an Either IOError Œ± (typically, a MonadError IOError Œº ‚áí Œº Œ±),
     convert an 'InappropriateType' error to a Nothing of Maybe Œ±.
 -}
squashInappropriateType ‚à∑ (AsIOError Œµ, MonadError Œµ Œº) ‚áí
                          Either Œµ Œ± ‚Üí Œº (Maybe Œ±)
squashInappropriateType = squashIOErrs [isInappropriateTypeError]

{- | `squashInappropriateType` for `ExceptT` -}
squashInappropriateTypeT ‚à∑ (AsIOError Œµ, MonadError Œµ Œº) ‚áí
                           ExceptT Œµ Œº Œ± ‚Üí Œº (Maybe Œ±)
squashInappropriateTypeT = join ‚àò fmap squashInappropriateType ‚àò splitMError

{- | `squashInappropriateType` specialized to `ùîπ` (akin to `squashIOErrsB` -}
squashInappropriateTypeB ‚à∑ (AsIOError Œµ, MonadError Œµ Œº) ‚áí Either Œµ ùîπ ‚Üí Œº ùîπ
squashInappropriateTypeB = squashIOErrsB [isInappropriateTypeError]

-- that's all, folks! ----------------------------------------------------------
